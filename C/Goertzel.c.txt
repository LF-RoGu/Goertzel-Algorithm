#include <stdio.h>
#include <math.h>

float goertzel_mag(int numSamples, int TARGET_FREQUENCY, int SAMPLING_RATE, float* data);

int main() {
    int numSamples = 135;
    int TARGET_FREQUENCY = 150000;
    int SAMPLING_RATE = 4000000;
    
    float data[135];
    
    // Populate the data array with a test signal, e.g., a sine wave at the target frequency
    for (int i = 0; i < numSamples; i++) {
        data[i] = sin(2 * M_PI * TARGET_FREQUENCY * i / SAMPLING_RATE);
    }
    
    float magnitude = goertzel_mag(numSamples, TARGET_FREQUENCY, SAMPLING_RATE, data);
    
    printf("Magnitude at %d Hz: %f\n", TARGET_FREQUENCY, magnitude);
    
    return 0;
}

float goertzel_mag(int numSamples, int TARGET_FREQUENCY, int SAMPLING_RATE, float* data) {
    int     k, i;
    float   floatnumSamples;
    float   omega, sine, cosine, coeff, q0, q1, q2, magnitude, real, imag;

    float   scalingFactor = numSamples / 2.0;

    floatnumSamples = (float) numSamples;
    k = (int) (0.5 + ((floatnumSamples * TARGET_FREQUENCY) / SAMPLING_RATE));
    omega = (2.0 * M_PI * k) / floatnumSamples;
    sine = sin(omega);
    cosine = cos(omega);
    coeff = 2.0 * cosine;
    q0 = 0;
    q1 = 0;
    q2 = 0;

    for (i = 0; i < numSamples; i++) {
        q0 = coeff * q1 - q2 + data[i];
        q2 = q1;
        q1 = q0;
    }

    // calculate the real and imaginary results
    // scaling appropriately
    real = (q1 - q2 * cosine) / scalingFactor;
    imag = (q2 * sine) / scalingFactor;

    magnitude = sqrtf(real * real + imag * imag);
    return magnitude;
}
