library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity OneComplToTwoCompl_tb is
end OneComplToTwoCompl_tb;

architecture Behavioral of OneComplToTwoCompl_tb is

    -- Component Declaration
    component OneComplToTwoCompl is
        Port ( clk : in  STD_LOGIC;
               rst : in  STD_LOGIC;
               one_compl_in : in  STD_LOGIC_VECTOR (11 downto 0);
               two_compl_out : out  STD_LOGIC_VECTOR (19 downto 0));
    end component;

    -- Signals to connect to the component
    signal clk : STD_LOGIC := '0';
    signal rst : STD_LOGIC := '0';
    signal one_compl_in : STD_LOGIC_VECTOR (11 downto 0);
    signal two_compl_out : STD_LOGIC_VECTOR (19 downto 0);

    -- Clock period definition
    constant clk_period : time := 10 ns;

begin

    -- Instantiate the Unit Under Test (UUT)
    uut: OneComplToTwoCompl
        Port map (
            clk => clk,
            rst => rst,
            one_compl_in => one_compl_in,
            two_compl_out => two_compl_out
        );

    -- Clock process definitions
    clk_process :process
    begin
        clk <= '0';
        wait for clk_period/2;
        clk <= '1';
        wait for clk_period/2;
    end process;

    -- Stimulus process
    stim_proc: process
    begin
        -- hold reset state for 20 ns
        rst <= '1';
        wait for 20 ns;
        rst <= '0';
        wait for 20 ns;
        
        -- Test case 1: Positive number in one's complement
        one_compl_in <= "000000000000";  -- +0
        wait for clk_period * 2;
        assert (two_compl_out = "00000000000000000000")report "Test Case 1 Failed: +0" severity error;
        
        one_compl_in <= "000000000001";  -- +1
        wait for clk_period * 2;
        assert (two_compl_out = "00000000000000000001")report "Test Case 2 Failed: +1" severity error;
        
        one_compl_in <= "011111111111";  -- +2047
        wait for clk_period * 2;
        assert (two_compl_out = "00000000011111111111")report "Test Case 3 Failed: +2047" severity error;
        
        -- Test case 2: Negative number in one's complement
        one_compl_in <= "111111111110";  -- -1
        wait for clk_period * 2;
        assert (two_compl_out = "11111111111111111111")report "Test Case 4 Failed: -1" severity error;
        
        one_compl_in <= "100000000000";  -- -2047
        wait for clk_period * 2;
        assert (two_compl_out = "11111111100000000001")report "Test Case 5 Failed: -2047" severity error;
        
        one_compl_in <= "111111111111";  -- -0
        wait for clk_period * 2;
        assert (two_compl_out = "00000000000000000000")report "Test Case 6 Failed: -0" severity error;

        -- Additional test cases can be added here

        -- End simulation
        wait;
    end process;

end Behavioral;
