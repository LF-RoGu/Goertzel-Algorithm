library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.math_real.all;

entity goertzel_process_tb is
end goertzel_process_tb;

architecture Behavioral of goertzel_process_tb is

    constant numSamples : integer := 8;
    
    signal clk       : std_logic := '0';
    signal reset     : std_logic := '1';
    signal start     : std_logic := '0';
    signal data      : real_vector(0 to numSamples-1) := (0.00, 0.23, 0.45, 0.65, 0.81, 0.92, 0.99, 1.00);
    signal coeff     : real := 0.0;
    signal sine      : real := 0.0;
    signal cosine    : real := 0.0;
    signal q1_out    : real;
    signal q2_out    : real;
    signal done      : std_logic;
    
    constant clk_period : time := 10 ns;

    -- Instantiate the unit under test (UUT)
    component goertzel_process
        generic (
            numSamples : integer := 8
        );
        port (
            clk       : in  std_logic;
            reset     : in  std_logic;
            start     : in  std_logic;
            data      : in  real_vector(0 to numSamples-1);
            coeff     : in  real;
            sine      : in  real;
            cosine    : in  real;
            q1_out    : out real;
            q2_out    : out real;
            done      : out std_logic
        );
    end component;

begin

    -- Instantiate UUT
    uut: goertzel_process
        generic map (
            numSamples => numSamples
        )
        port map (
            clk       => clk,
            reset     => reset,
            start     => start,
            data      => data,
            coeff     => coeff,
            sine      => sine,
            cosine    => cosine,
            q1_out    => q1_out,
            q2_out    => q2_out,
            done      => done
        );

    -- Clock generation
    clk_process: process
    begin
        while true loop
            clk <= '0';
            wait for clk_period / 2;
            clk <= '1';
            wait for clk_period / 2;
        end loop;
    end process;

    -- Stimulus process
    stim_proc: process
        variable omega : real;
        variable k : integer;
        variable floatnumSamples : real;

    begin
        -- Initialize input signals
        coeff <= 0.0;
        sine <= 0.0;
        cosine <= 0.0;

        -- Apply reset
        reset <= '1';
        wait for clk_period * 2;
        reset <= '0';

        -- Calculate coefficients
        floatnumSamples := real(numSamples);
        k := integer(0.5 + (floatnumSamples * 1000.0 / 8000.0)); -- Example values: TARGET_FREQUENCY = 1000, SAMPLING_RATE = 8000
        omega := (2.0 * MATH_PI * real(k)) / floatnumSamples;
        sine <= sin(omega);
        cosine <= cos(omega);
        coeff <= 2.0 * cosine;

        -- Start the test
        start <= '1';
        wait for clk_period * 10;
        start <= '0';

        -- Wait for processing to complete
        wait until done = '1';

        -- Check results
        report "Test completed with q1_out = " & real'image(q1_out) & " and q2_out = " & real'image(q2_out);

        -- End simulation
        wait;
    end process;

end Behavioral;
