library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;  -- Use NUMERIC_STD for unsigned and signed types


entity comp2bin_tb is
end comp2bin_tb;

architecture Behavioral of comp2bin_tb is
	constant N_bits : integer := 12;

    -- Component declaration
    component comp2bin is
        generic (
            N_bits : integer := 12;
        );
        port (
            i_data : in  std_logic_vector(N_bits-1 downto 0);
            o_data : out std_logic_vector(N_bits-1 downto 0);
            sign   : out std_logic
        );
    end component;

    -- Signals for connecting to the component
    signal i_data : std_logic_vector(N_bits-1 downto 0) := (others => '0');
    signal o_data : std_logic_vector(N_bits-1 downto 0);
    signal sign   : std_logic;

begin

    -- Instantiate the Unit Under Test (UUT)
    uut: comp2bin
        generic map (
            N_bits => 12
        )
        port map (
            i_data => i_data,
            o_data => o_data,
            sign   => sign
        );

    -- Stimulus process
    stim_proc: process
    variable expected_output : std_logic_vector(N_bits-1 downto 0);
    variable expected_sign   : std_logic;
    begin
        -- Test case 1: Apply a positive number
        i_data <= std_logic_vector(to_signed(341, N_bits));  -- +341 in decimal
        expected_output := std_logic_vector(to_unsigned(341, N_bits));
        expected_sign := '0';
        wait for 10 ns;
        assert o_data = expected_output and sign = expected_sign report "Test case 1 failed: +341" severity error;

        -- Test case 2: Apply a negative number
        i_data <= std_logic_vector(to_signed(-341, N_bits));  -- -341 in decimal
        expected_output := std_logic_vector(to_unsigned(341, N_bits));
        expected_sign := '1';
        wait for 10 ns;
        assert o_data = expected_output and sign = expected_sign report "Test case 2 failed: -341" severity error;

        -- Test case 3: Apply zero
        i_data <= std_logic_vector(to_signed(0, N_bits));  -- 0 in decimal
        expected_output := std_logic_vector(to_unsigned(0, N_bits));
        expected_sign := '0';
        wait for 10 ns;
        assert o_data = expected_output and sign = expected_sign report "Test case 3 failed: 0" severity error;

        -- Test case 4: Apply another positive number
        i_data <= std_logic_vector(to_signed(1, N_bits));  -- +1 in decimal
        expected_output := std_logic_vector(to_unsigned(1, N_bits));
        expected_sign := '0';
        wait for 10 ns;
        assert o_data = expected_output and sign = expected_sign report "Test case 4 failed: +1" severity error;

        -- Test case 5: Apply another negative number
        i_data <= std_logic_vector(to_signed(-1, N_bits));  -- -1 in decimal
        expected_output := std_logic_vector(to_unsigned(1, N_bits));
        expected_sign := '1';
        wait for 10 ns;
        assert o_data = expected_output and sign = expected_sign report "Test case 5 failed: -1" severity error;

        -- End simulation
        wait;
    end process;

end Behavioral;
