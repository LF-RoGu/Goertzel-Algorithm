library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity goertzel_init_tb is
end goertzel_init_tb;

architecture Behavioral of goertzel_init_tb is
    -- Constants for the testbench
    constant N_bits   : integer := 20;
    constant N_chunk  : integer := 135;
    constant f_sample : real := 4000.0;

    -- Testbench signals
    signal clk      : std_logic := '0';
    signal reset    : std_logic := '1';
    signal enable   : std_logic := '0';
    signal f_target : std_logic_vector(N_bits - 1 downto 0) := (others => '0');
    signal coeff    : std_logic_vector(N_bits - 1 downto 0);
    signal sine     : std_logic_vector(N_bits - 1 downto 0);
    signal cosine   : std_logic_vector(N_bits - 1 downto 0);

    -- Clock period
    constant clk_period : time := 10 ns;

begin
    -- Instantiate the Unit Under Test (UUT)
    uut: entity work.goertzel_init
        generic map (
            N_bits   => N_bits,
            N_chunk  => N_chunk,
            f_sample => f_sample
        )
        port map (
            clk      => clk,
            reset    => reset,
            enable   => enable,
            f_target => f_target,
            coeff    => coeff,
            sine     => sine,
            cosine   => cosine
        );

    -- Clock generation process
    clk_process : process
    begin
        while true loop
            clk <= '0';
            wait for clk_period / 2;
            clk <= '1';
            wait for clk_period / 2;
        end loop;
    end process;

    -- Test process
    test_process : process
    begin
        -- Initialize inputs
        reset <= '1';
        enable <= '0';
        f_target <= std_logic_vector(to_unsigned(500, N_bits)); -- Example target frequency

        -- Wait for global reset
        wait for 20 ns;
        reset <= '0';

        -- Wait for a few clock cycles
        wait for 20 ns;

        -- Enable the module and observe outputs
        enable <= '1';
        wait for 100 ns;
        enable <= '0';

        -- Apply new target frequency
        f_target <= std_logic_vector(to_unsigned(1000, N_bits));

        -- Enable the module and observe outputs
        wait for 20 ns;
        enable <= '1';
        wait for 100 ns;
        enable <= '0';

        -- Apply another target frequency
        f_target <= std_logic_vector(to_unsigned(1500, N_bits));

        -- Enable the module and observe outputs
        wait for 20 ns;
        enable <= '1';
        wait for 100 ns;
        enable <= '0';

        -- End simulation
        wait;
    end process;
end Behavioral;
