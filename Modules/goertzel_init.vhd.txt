library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;
use IEEE.MATH_REAL.ALL;

entity goertzel_init is
    generic 
    (
        N_bits   : integer := 20;
        N_chunk  : integer := 135;  -- Project specific N
        f_sample : real := 4000000.0    -- Project sampling frequency
    );
    Port 
    ( 
        clk      : in  STD_LOGIC;
        rst      : in  STD_LOGIC;
        enable   : in  STD_LOGIC;
        f_target : in  STD_LOGIC_VECTOR (N_bits - 1 downto 0);
        coeff    : out STD_LOGIC_VECTOR (N_bits - 1 downto 0);
        sine     : out STD_LOGIC_VECTOR (N_bits - 1 downto 0);
        cosine   : out STD_LOGIC_VECTOR (N_bits - 1 downto 0)
    );
end goertzel_init;

architecture Behavioral of goertzel_init is
begin

    process(clk, rst)
    begin
        if rst = '1' then
            coeff <= (others => '0');
            sine <= (others => '0');
            cosine <= (others => '0');

        elsif rising_edge(clk) then
            coeff <= std_logic_vector(to_signed(1946, N_bits));
            sine <= std_logic_vector(to_signed(230, N_bits));
            cosine <= std_logic_vector(to_signed(973, N_bits));
        end if;
    end process;
end Behavioral;
