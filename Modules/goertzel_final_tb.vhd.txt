library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity goertzel_final_tb is
end goertzel_final_tb;

architecture Behavioral of goertzel_final_tb is

    -- Constants
    constant N_bits : integer := 20;
    constant clk_period : time := 10 ns;

    -- Signal declarations
    signal clk       : STD_LOGIC := '0';
    signal reset     : STD_LOGIC := '1';
    signal enable    : STD_LOGIC := '0';
    signal q1        : STD_LOGIC_VECTOR (N_bits - 1 downto 0);
    signal q2        : STD_LOGIC_VECTOR (N_bits - 1 downto 0);
    signal cosine    : STD_LOGIC_VECTOR (N_bits - 1 downto 0);
    signal sine      : STD_LOGIC_VECTOR (N_bits - 1 downto 0);
    signal magnitude : STD_LOGIC_VECTOR (N_bits - 1 downto 0);

    -- Component instantiation
    component goertzel_final
        generic 
        (
            N_bits : integer := 20;
            scaling_factor : real := 1.0
        );
        Port 
        (
            clk       : in  STD_LOGIC;
            reset     : in  STD_LOGIC;
            enable    : in  STD_LOGIC;
            q1        : in  STD_LOGIC_VECTOR (N_bits - 1 downto 0);
            q2        : in  STD_LOGIC_VECTOR (N_bits - 1 downto 0);
            cosine    : in  STD_LOGIC_VECTOR (N_bits - 1 downto 0);
            sine      : in  STD_LOGIC_VECTOR (N_bits - 1 downto 0);
            magnitude : out STD_LOGIC_VECTOR (N_bits - 1 downto 0)
        );
    end component;

begin

    -- Clock generation
    clk_process : process
    begin
        while true loop
            clk <= '0';
            wait for clk_period / 2;
            clk <= '1';
            wait for clk_period / 2;
        end loop;
    end process;

    -- Stimulus process
    stimulus : process
    begin
        -- Reset the system
        reset <= '1';
        enable <= '0';
        wait for clk_period * 2;
        reset <= '0';
        wait for clk_period * 2;
        
        -- Apply test vectors
        enable <= '1';
        q1 <= std_logic_vector(to_signed(1000, N_bits));  -- Example q1 value
        q2 <= std_logic_vector(to_signed(500, N_bits));   -- Example q2 value
        cosine <= std_logic_vector(to_signed(973, N_bits)); -- Example cosine value scaled by 1000
        sine <= std_logic_vector(to_signed(231, N_bits));   -- Example sine value scaled by 1000
        wait for clk_period * 10;

        -- Additional test vectors can be applied here
        enable <= '0';
        wait for clk_period * 2;
        enable <= '1';
        q1 <= std_logic_vector(to_signed(1500, N_bits));  -- Example q1 value
        q2 <= std_logic_vector(to_signed(700, N_bits));   -- Example q2 value
        cosine <= std_logic_vector(to_signed(900, N_bits)); -- Example cosine value scaled by 1000
        sine <= std_logic_vector(to_signed(300, N_bits));   -- Example sine value scaled by 1000
        wait for clk_period * 10;

        -- Stop simulation
        wait;
    end process;

    -- Component instantiation
    uut: goertzel_final
        generic map (
            N_bits => N_bits,
            scaling_factor => 1.0
        )
        port map (
            clk => clk,
            reset => reset,
            enable => enable,
            q1 => q1,
            q2 => q2,
            cosine => cosine,
            sine => sine,
            magnitude => magnitude
        );

end Behavioral;
