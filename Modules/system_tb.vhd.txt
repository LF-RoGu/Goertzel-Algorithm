library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;

entity system_tb_sine is
end system_tb_sine;

architecture Behavioral of system_tb_sine is

	-- DUT component
    component System is
      port(
        clk         : in  STD_LOGIC;
        rst         : in  STD_LOGIC;
        input       : in  STD_LOGIC_VECTOR(11 downto 0);
        magnitude   : out STD_LOGIC_VECTOR(19 downto 0);
        real_part   : out STD_LOGIC_VECTOR(19 downto 0);
        img_part    : out STD_LOGIC_VECTOR(19 downto 0)
        );
    end component;
    
    -- Constants for the testbench
    constant N_bits   : integer := 20;
    constant input_width : integer := 12;

    -- Testbench signals
    signal clk        : std_logic := '0';
    signal rst         : std_logic := '1';
    signal data_signal : std_logic_vector(input_width - 1 downto 0) := (others => '0');
    signal magnitude   : std_logic_vector(N_bits - 1 downto 0);
    signal real_part   : std_logic_vector(N_bits - 1 downto 0);
    signal img_part    : std_logic_vector(N_bits - 1 downto 0);
    signal ready       : std_logic;

    -- Clock period
    constant clk_period : time := 10 ns;

begin
    -- Instantiate the Unit Under Test (UUT)
    uut: entity work.System
        port map (
            clk       => clk,
            rst       => rst,
            input     => data_signal,
            magnitude => magnitude,
            real_part      => real_part,
            img_part       => img_part
        );

    -- Clock generation process
    clk_process : process
    begin
        while true loop
            clk <= '0';
            wait for clk_period / 2;
            clk <= '1';
            wait for clk_period / 2;
        end loop;
    end process;

    -- Test process
    test_process : process
	variable line_hex : line;
	file input_file : text;
	variable input_bit : unsigned(11 downto 0);

  		begin
    			file_open(input_file, "input_sine.txt", read_mode);
    			while not endfile(input_file) loop
				readline(input_file, line_hex);
      				hread(line_hex, input_bit);
      				report "input_bit: " & to_hstring(input_bit);
      				if input_bit = 1 then
        				rst <= '1';
      				else
        				rst <= '0';
        				data_signal <= std_logic_vector(resize(input_bit, data_signal'length));
      				end if;
      				wait until rising_edge(clk);
    			end loop;
    			file_close(input_file);
   			 wait;
  		end process;
end Behavioral;
