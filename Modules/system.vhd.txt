library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;
use IEEE.MATH_REAL.ALL;

entity System is
    Port (
        clk         : in  STD_LOGIC;
        rst         : in  STD_LOGIC;
        input       : in  STD_LOGIC_VECTOR(11 downto 0);
        magnitude   : out STD_LOGIC_VECTOR(19 downto 0);
        real_part        : out STD_LOGIC_VECTOR(19 downto 0);
        img_part         : out STD_LOGIC_VECTOR(19 downto 0)
    );
end System;

architecture Structural of System is

    -- Constant values
    constant N_const      : integer := 135;
    constant f_target     : integer := 135000; -- 135 kHz as an integer
    constant f_sample     : integer := 4000000; -- 4 MHz as an integer

    -- Signals to connect the submodules
    signal enable        : STD_LOGIC := '1';
    signal filler_output : STD_LOGIC_VECTOR(19 downto 0);
    signal sample        : STD_LOGIC_VECTOR(11 downto 0) := (others => '0');
    signal coeff         : STD_LOGIC_VECTOR(19 downto 0);
    signal cosine        : STD_LOGIC_VECTOR(19 downto 0);
    signal sine          : STD_LOGIC_VECTOR(19 downto 0);
    signal scale         : STD_LOGIC_VECTOR(19 downto 0);
    signal q0            : STD_LOGIC_VECTOR(19 downto 0);
    signal q1            : STD_LOGIC_VECTOR(19 downto 0);
    signal q2            : STD_LOGIC_VECTOR(19 downto 0);
    signal ready         : STD_LOGIC;

begin

    -- Filler instance
    goertzel_filler : entity work.goertzel_filler
        port map (
            clk    => clk,
            rst    => rst,
            input  => input,
            output => filler_output
        );

    -- Initializer instance
    goertzel_init : entity work.goertzel_init
        port map (
            clk      => clk,
            rst      => rst,
            enable   => enable,
            f_target => std_logic_vector(to_unsigned(f_target, 20)),
            coeff    => coeff,
            sine     => sine,
            cosine   => cosine
        );

    -- Goertzel process instance
    goertzel_process : entity work.goertzel_process
        generic map (
            N_bits => 20,
            numSamples => N_const
        )
        port map (
            clk    => clk,
            rst    => rst,
            enable => enable,
            coeff  => coeff,
            data   => filler_output,
            q1     => q1,
            q2     => q2,
            ready  => ready
        );

    -- Result instance
    goertzel_final : entity work.goertzel_final
        port map (
            clk       => clk,
            rst       => rst,
            enable    => enable,
            q1        => q1,
            q2        => q2,
            cosine    => cosine,
            sine      => sine,
            magnitude => magnitude
        );

end Structural;
