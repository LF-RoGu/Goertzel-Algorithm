library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;
use IEEE.MATH_REAL.ALL;

entity system is
    Port (
        clk         : in  STD_LOGIC;
        rst         : in  STD_LOGIC;
        input       : in  STD_LOGIC_VECTOR(11 downto 0);
        magnitude   : out STD_LOGIC_VECTOR(19 downto 0);
        real        : out STD_LOGIC_VECTOR(19 downto 0);
        img         : out STD_LOGIC_VECTOR(19 downto 0)
    );
end system;

architecture Structural of system is

    -- Constant values
    constant N_const      : integer := 135;
    constant f_target     : real := 135000.0; -- 135 kHz
    constant f_sample     : real := 4000000.0; -- 4 MHz

    -- Signals to connect the submodules
    signal filler_output  : STD_LOGIC_VECTOR(11 downto 0);
    signal sample         : STD_LOGIC_VECTOR(11 downto 0);
    signal coeff          : STD_LOGIC_VECTOR(19 downto 0);
    signal cosine         : STD_LOGIC_VECTOR(19 downto 0);
    signal sine           : STD_LOGIC_VECTOR(19 downto 0);
    signal scale          : STD_LOGIC_VECTOR(19 downto 0);
    signal q0             : STD_LOGIC_VECTOR(19 downto 0);
    signal q1             : STD_LOGIC_VECTOR(19 downto 0);
    signal q2             : STD_LOGIC_VECTOR(19 downto 0);

begin

    -- Filler instance
    filler_inst : entity work.filler
        port map (
            clk    => clk,
            rst    => rst,
            input  => input,
            output => filler_output,
            sample => sample
        );

    -- Initializer instance
    initializer_inst : entity work.initializer
        generic map (
            N_bits => 20,
            N_chunk => N_const,
            f_sample => f_sample
        )
        port map (
            clk      => clk,
            reset    => rst,
            enable   => '1', -- Assuming always enabled
            f_target => std_logic_vector(to_unsigned(f_target, 20)),
            coeff    => coeff,
            sine     => sine,
            cosine   => cosine
        );

    -- Goertzel instance
    goertzel_inst : entity work.goertzel
        port map (
            clk    => clk,
            rst    => rst,
            sample => sample,
            N      => std_logic_vector(to_unsigned(N_const, 8)),
            coeff  => coeff,
            cosine => cosine,
            sine   => sine,
            scale  => scale,
            q1     => q1,
            q2     => q2
        );

    -- Result instance
    result_inst : entity work.result
        port map (
            clk       => clk,
            rst       => rst,
            q1        => q1,
            q2        => q2,
            magnitude => magnitude,
            real      => real,
            img       => img
        );

end Structural;
