library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity goertzel_process is
    generic (
        N_bits : integer := 20;
        coefficient_mul : signed(19 downto 0) := to_signed(1000, 20);
        numSamples : integer := 135
    );
    Port (
        clk         : in  STD_LOGIC;
        rst         : in  STD_LOGIC;
        input       : in  STD_LOGIC_VECTOR(11 downto 0);
        magnitude   : out STD_LOGIC_VECTOR(19 downto 0);
        real_part   : out STD_LOGIC_VECTOR(19 downto 0);
        img_part    : out STD_LOGIC_VECTOR(19 downto 0)
    );
end goertzel_process;

architecture Structural of System is

    -- Constant values
    constant N_const      : integer := 135;
    constant f_target     : integer := 135000; -- 135 kHz as an integer
    constant f_sample     : integer := 4000000; -- 4 MHz as an integer

    -- Signals to connect the submodules
    signal filler_output : STD_LOGIC_VECTOR(19 downto 0);
    signal sample        : STD_LOGIC_VECTOR(11 downto 0) := (others => '0');
    signal coeff         : STD_LOGIC_VECTOR(19 downto 0);
    signal cosine        : STD_LOGIC_VECTOR(19 downto 0);
    signal sine          : STD_LOGIC_VECTOR(19 downto 0);
    signal scale         : STD_LOGIC_VECTOR(19 downto 0);
    signal q0            : STD_LOGIC_VECTOR(19 downto 0);
    signal q1            : STD_LOGIC_VECTOR(19 downto 0);
    signal q2            : STD_LOGIC_VECTOR(19 downto 0);

begin
    process (clk, rst)
        variable q0 : signed(N_bits - 1 downto 0) := (others => '0');
        variable q1 : signed(N_bits - 1 downto 0) := (others => '0');
        variable q2 : signed(N_bits - 1 downto 0) := (others => '0');
        variable real_part_v : signed(N_bits - 1 downto 0) := (others => '0');
        variable img_part_v : signed(N_bits - 1 downto 0) := (others => '0');
        variable coefficient : signed(N_bits - 1 downto 0) := (others => '0');
        variable cosine_signed, sine_signed : signed(N_bits - 1 downto 0);
        variable magnitude_var : signed(2*N_bits-1 downto 0) := (others => '0');
        variable temp_q1, temp_q2, temp_result : signed(2*N_bits-1 downto 0);
        variable sample_count : integer := 0;
    begin
        if rst = '1' then
            q0 := (others => '0');
            q1 := (others => '0');
            q2 := (others => '0');
            real_part_v := (others => '0');
            img_part_v := (others => '0');
            sample_count := 0;
            ready <= '0';
        elsif rising_edge(clk) then
            coefficient := signed(unsigned(coeff));
            cosine_signed := signed(unsigned(cosine));
            sine_signed := signed(unsigned(sine));

            temp_q1 := resize(q1, 2*N_bits);
            temp_q2 := resize(q2, 2*N_bits);
            temp_result := resize(coefficient * temp_q1 / coefficient_mul, 2*N_bits);

    -- Initializer instance
    goertzel_init : entity work.goertzel_init
        port map (
            clk      => clk,
            rst      => rst,
            f_target => std_logic_vector(to_unsigned(f_target, 20)),
            coeff    => coeff,
            sine     => sine,
            cosine   => cosine
        );

    -- Goertzel process instance
    goertzel_process : entity work.goertzel_process
        generic map (
            N_bits => 20,
            numSamples => N_const
        )
        port map (
            clk        => clk,
            rst        => rst,
            coeff      => coeff,
            data       => filler_output,
            cosine     => cosine,
            sine       => sine,
            magnitude  => magnitude
            --real_part  => real_part,
            --img_part   => img_part
        );

end Structural;
